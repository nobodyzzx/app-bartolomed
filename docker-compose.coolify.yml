version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.Dockerfile
      target: production
    expose:
      - "4200"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    labels:
      - "coolify.type=application"
      - "coolify.name=frontend"

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
      target: production
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-bartolomed_user}
      - DB_PASS=${POSTGRES_PASSWORD:-bartolomed_pass}
      - DB_NAME=${POSTGRES_DB:-bartolomed_db}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-change-in-production}
      - PORT=3000
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    labels:
      - "coolify.type=application"
      - "coolify.name=backend"

  database:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-bartolomed_db}
      - POSTGRES_USER=${POSTGRES_USER:-bartolomed_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bartolomed_pass}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bartolomed_user} -d ${POSTGRES_DB:-bartolomed_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    labels:
      - "coolify.type=database"
      - "coolify.name=database"

volumes:
  db_data:
    driver: local

networks:
  app-network:
    driver: bridge
