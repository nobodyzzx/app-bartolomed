services:
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.Dockerfile
      target: development
    ports:
      - '4200:4200'
    volumes:
      - ./frontend:/app:rw
      - /app/node_modules
    command: npx ng serve --host 0.0.0.0
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    security_opt:
      - label=disable

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
      target: development
    ports:
      - '3000:3000'
    volumes:
      - ./backend:/app:rw
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-change-me}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your-refresh-secret-change-me}
      - GOD_MODE_TOKEN=${GOD_MODE_TOKEN:-change-me-very-strong}
      - NODE_ENV=development
    command: npm run start:dev
    security_opt:
      - label=disable

  db:
    image: postgres:13
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
